[3.503s] Invoking command in '/home/ubuntu/ros2_ws/src/robdep_project': PYTHONPATH=/home/ubuntu/ros2_ws/build/robdep_project/prefix_override:/home/ubuntu/ros2_ws/install/robdep_project/lib/python3.8/site-packages:${PYTHONPATH} /usr/bin/python3 setup.py egg_info --egg-base ../../build/robdep_project build --build-base /home/ubuntu/ros2_ws/build/robdep_project/build install --record /home/ubuntu/ros2_ws/build/robdep_project/install.log --single-version-externally-managed
[4.672s] running egg_info
[4.674s] writing ../../build/robdep_project/robdep_project.egg-info/PKG-INFO
[4.677s] writing dependency_links to ../../build/robdep_project/robdep_project.egg-info/dependency_links.txt
[4.678s] writing entry points to ../../build/robdep_project/robdep_project.egg-info/entry_points.txt
[4.678s] writing requirements to ../../build/robdep_project/robdep_project.egg-info/requires.txt
[4.679s] writing top-level names to ../../build/robdep_project/robdep_project.egg-info/top_level.txt
[4.830s] reading manifest file '../../build/robdep_project/robdep_project.egg-info/SOURCES.txt'
[4.834s] writing manifest file '../../build/robdep_project/robdep_project.egg-info/SOURCES.txt'
[4.835s] running build
[4.841s] running build_py
[4.842s] copying robdep_project/detections.py -> /home/ubuntu/ros2_ws/build/robdep_project/build/lib/robdep_project
[4.842s] running install
[4.843s] running install_lib
[4.849s] copying /home/ubuntu/ros2_ws/build/robdep_project/build/lib/robdep_project/detections.py -> /home/ubuntu/ros2_ws/install/robdep_project/lib/python3.8/site-packages/robdep_project
[4.851s] byte-compiling /home/ubuntu/ros2_ws/install/robdep_project/lib/python3.8/site-packages/robdep_project/detections.py to detections.cpython-38.pyc
[4.854s]   File "/home/ubuntu/ros2_ws/install/robdep_project/lib/python3.8/site-packages/robdep_project/detections.py", line 1
[4.855s]     import rclpy                                                                                                                                                from rclpy.node import Node                                                                                                                                 from sensor_msgs.msg import Image                                                                                                                           from cv_bridge import CvBridge                                                                                                                              from roboflowoak import RoboflowOak                                                                                                                         import cv2                                                                                                                                                  import time                                                                                                                                                 import numpy as np                                                                                                                                                                                                                                                                                                                                                                                                                                                                  class RoboflowOakNode(Node):                                                                                                                                    def __init__(self):                                                                                                                                             super().__init__('detections')                                                                                                                                                                                                                                                                                          self.bridge = CvBridge()                                                                                                                                                                                                                                                                                                # Instantiating an object (rf) with the RoboflowOak module                                                                                                  self.rf = RoboflowOak(model="robdep_project", confidence=0.05, overlap=0.5,                                                                                                       version="2", api_key="L3QBwj24C5kejlKSnKi5", rgb=True,                                                                                                      depth=True, device=None, blocking=True)                                                                                                                                                                                                                                                           # Creating a publisher to publish the detected image and depth                                                                                              self.image_pub = self.create_publisher(Image, 'oak_image', 1)                                                                                               self.depth_pub = self.create_publisher(Image, 'oak_depth', 1)                                                                                                                                                                                                                                                       def run(self):                                                                                                                                                  # Running the model and publishing the detected data                                                                                                        while True:                                                                                                                                                     t0 = time.time()                                                                                                                                            # The rf.detect() function runs the model inference                                                                                                         result, frame, raw_frame, depth = self.rf.detect()                                                                                                          predictions = result["predictions"]                                                                                                                                                                                                                                                                                     # Setting parameters for depth calculation                                                                                                                  max_depth = np.amax(depth)                                                                                                                                                                                                                                                                                              # Publishing the image and depth data                                                                                                                       depth = cv2.convertScaleAbs(depth, alpha=0.05)                                                                                                              depth = cv2.normalize(                                                                                                                                          depth, None, 0, 1, cv2.NORM_MINMAX, cv2.CV_32F)                                                                                                                                                                                                                                                                     img_msg = self.bridge.cv2_to_imgmsg(frame, 'bgr8')                                                                                                          depth_msg = self.bridge.cv2_to_imgmsg(depth, '32FC1')                                                                                                       self.image_pub.publish(img_msg)                                                                                                                             self.depth_pub.publish(depth_msg)                                                                                                                                                                                                                                                                                       # Timing for benchmarking purposes                                                                                                                          t = time.time() - t0                                                                                                                                        if depth>=100:                                                                                                                                                  self.get_logger().info('INFERENCE TIME IN MS: %.2f' % (1 / t))                                                                                              self.get_logger().info('PREDICTIONS: %s' %                                                                                                                                     [p.json() for p in predictions])                                                                                                                                                                                                                                                                 # Uncomment the following lines if you want to display the video feed                                                                                       # cv2.imshow("frame", frame)                                                                                                                                # cv2.imshow("depth", depth / max_depth)                                                                                                                                                                                                                                                                                # How to close the OAK inference window / stop inference: CTRL+q or CTRL+c                                                                                  # if cv2.waitKey(1) == ord('q'):                                                                                                                            #     break                                                                                                                                                                                                                                                                                                                                                                                                                                                             def main():                                                                                                                                                     rclpy.init(args=None)                                                                                                                                       node = RoboflowOakNode()                                                                                                                                    node.run()                                                                                                                                                  rclpy.spin(node)                                                                                                                                            node.destroy_node()                                                                                                                                         rclpy.shutdown()                                                                                                                                                                                                                                                                                                                                                                                                                                                                if __name__ == '__main__':                                                                                                                                      main()  import rclpy
[4.856s]                                                                                                                                                                 ^
[4.862s] SyntaxError: invalid syntax
[4.863s] 
[4.864s] running install_data
[4.865s] running install_egg_info
[4.865s] removing '/home/ubuntu/ros2_ws/install/robdep_project/lib/python3.8/site-packages/robdep_project-0.0.0-py3.8.egg-info' (and everything under it)
[4.866s] Copying ../../build/robdep_project/robdep_project.egg-info to /home/ubuntu/ros2_ws/install/robdep_project/lib/python3.8/site-packages/robdep_project-0.0.0-py3.8.egg-info
[4.874s] running install_scripts
[4.949s] Installing detections script to /home/ubuntu/ros2_ws/install/robdep_project/lib/robdep_project
[4.953s] writing list of installed files to '/home/ubuntu/ros2_ws/build/robdep_project/install.log'
[5.078s] Invoked command in '/home/ubuntu/ros2_ws/src/robdep_project' returned '0': PYTHONPATH=/home/ubuntu/ros2_ws/build/robdep_project/prefix_override:/home/ubuntu/ros2_ws/install/robdep_project/lib/python3.8/site-packages:${PYTHONPATH} /usr/bin/python3 setup.py egg_info --egg-base ../../build/robdep_project build --build-base /home/ubuntu/ros2_ws/build/robdep_project/build install --record /home/ubuntu/ros2_ws/build/robdep_project/install.log --single-version-externally-managed

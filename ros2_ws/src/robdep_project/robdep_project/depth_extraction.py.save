import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from geometry_msgs.msg import Point
from std_msgs.msg import Float64

class DepthSubscriberNode(Node):
    def __init__(self):
        super().__init__("depth_extraction_node")
        self.subscription = self.create_subscription(Image, "/stereo/depth", self.depth_callback, 10)
        self.publisher = self.create_publisher(Float64, "/point_depth", 10)

    def depth_callback(self, msg, x=0, y=0):
        # Extract depth information from the depth message
        # Example: assuming the depth message contains a single depth value at a specific pixel (u, v)
        u = x  # example pixel x-coordinate
        v = y  # example pixel y-coordinate
        offset = v * msg.step + u * 4
        depth_value = offset = v * msg.step + u * 4  # 4 bytes per pixel
    depth_value = struct.unpack('f', msg.data[offset:offset+4])[0]msg.data[y * msg.step + x * (msg.step // msg.width)]

        # Create a Float64 message with the extracted depth value and publish it
        depth_value_msg = Float64()
        depth_value_msg.data = depth_value

        self.publisher.publish(depth_value_msg)

def main(args=None):
    rclpy.init(args=args)
    node = DepthSubscriberNode()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == "__main__":
    main()
